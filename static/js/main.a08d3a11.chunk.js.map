{"version":3,"sources":["App.js","index.js"],"names":["App","useState","idCounter","setIdCounter","todos","setTodo","className","onSubmit","e","preventDefault","inputText","target","value","nextid","id","task","checked","stopped","name","map","todo","type","onChange","changedTodos","handleChangeCheckBox","onClick","stoppedTodos","handleClickStopButton","filter","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"iOA4EeA,MA1Ef,WAAgB,IAAD,EACoBC,mBAAS,GAD7B,mBACPC,EADO,KACIC,EADJ,OAEWF,mBAAS,IAFpB,mBAEPG,EAFO,KAEAC,EAFA,KAgDd,OACC,sBAAKC,UAAU,MAAf,UACC,uBAAMC,SAzCa,SAACC,GACrBA,EAAEC,iBACF,IAAMC,EAAYF,EAAEG,OAAF,KAAiBC,MAC7BC,EAASX,EAAY,EAC3BC,EAAaU,GACbR,EAAQ,GAAD,mBAAKD,GAAL,CAAY,CAAEU,GAAID,EAAQE,KAAML,EAAWM,SAAS,EAAOC,SAAS,OAoC1E,UACC,uBAAOC,KAAK,SACZ,qDAED,8BACEd,EAAMe,KAAI,SAACC,GAAD,OACV,sBAAmBd,UAAWc,EAAKJ,QAAU,UAAY,GAAzD,UACC,uBACCK,KAAK,WACLC,SAAU,kBAtCa,SAACR,GAC7B,IAAMS,EAAenB,EAAMe,KAAI,SAACC,GAC/B,OAAIA,EAAKN,KAAOA,EACR,2BAAKM,GAAZ,IAAkBJ,SAAUI,EAAKJ,UAE3BI,KAERf,EAAQkB,GA+BaC,CAAqBJ,EAAKN,OAE1CM,EAAKL,KACN,wBAAQU,QAAS,kBAxBQ,SAACX,GAC9B,IAAMY,EAAetB,EAAMe,KAAI,SAACC,GAC/B,OAAIA,EAAKN,KAAOA,EACR,2BAAKM,GAAZ,IAAkBH,QAASG,EAAKH,UAE1BG,KAERf,EAAQqB,GAiBmBC,CAAsBP,EAAKN,KAAlD,0BAGA,wBAAQW,QAAS,kBA/BWX,EA+BmBM,EAAKN,QA9BxDT,EAAQD,EAAMwB,QAAO,SAACR,GAAD,OAAUA,EAAKN,KAAOA,MADZ,IAACA,GA+B5B,4BATSM,EAAKN,aCrDpBe,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.a08d3a11.chunk.js","sourcesContent":["import { useState } from 'react';\n\nfunction App() {\n\tconst [idCounter, setIdCounter] = useState(0);\n\tconst [todos, setTodo] = useState([]);\n\n\t/**\n\t * フォーム送信したらtodo配列にtodoを追加\n\t * @param {Event} e 送信イベント\n\t */\n\n\tconst handleSubmit = (e) => {\n\t\te.preventDefault();\n\t\tconst inputText = e.target[\"task\"].value\n\t\tconst nextid = idCounter + 1\n\t\tsetIdCounter(nextid);\n\t\tsetTodo([...todos, { id: nextid, task: inputText, checked: false, stopped: false }]);\n\t};\n\n\t/**\n\t * TODOのチェックボックスがクリックされたら該当の checked フラグを toggle する\n\t * @param {number} id\n\t */\n\tconst handleChangeCheckBox = (id) => {\n\t\tconst changedTodos = todos.map((todo) => {\n\t\t\tif (todo.id === id) {\n\t\t\t\treturn { ...todo, checked: !todo.checked };\n\t\t\t}\n\t\t\treturn todo;\n\t\t});\n\t\tsetTodo(changedTodos)\n\t};\n\t/**\n\t * 指定されたidを配列から取り除いた配列にtodosを更新\n\t * @param {number} id \n\t */\n\tconst handleClickDeleteButton = (id) => {\n\t\tsetTodo(todos.filter((todo) => todo.id !== id));\n\t};\n\n\tconst handleClickStopButton = (id) => {\n\t\tconst stoppedTodos = todos.map((todo) => {\n\t\t\tif (todo.id === id) {\n\t\t\t\treturn { ...todo, stopped: todo.stopped };\n\t\t\t}\n\t\t\treturn todo;\n\t\t});\n\t\tsetTodo(stoppedTodos)\n\t};\n\n\treturn (\n\t\t<div className='App'>\n\t\t\t<form onSubmit={handleSubmit}>\n\t\t\t\t<input name='task' />\n\t\t\t\t<button>登録</button>\n\t\t\t</form>\n\t\t\t<div>\n\t\t\t\t{todos.map((todo) => (\n\t\t\t\t\t<div key={todo.id} className={todo.checked ? \"checked\" : \"\"}>\n\t\t\t\t\t\t<input\n\t\t\t\t\t\t\ttype='checkbox'\n\t\t\t\t\t\t\tonChange={() => handleChangeCheckBox(todo.id)}\n\t\t\t\t\t\t/>\n\t\t\t\t\t\t{todo.task}\n\t\t\t\t\t\t<button onClick={() => handleClickStopButton(todo.id)}>\n\t\t\t\t\t\t\t停止\n\t\t\t\t\t\t</button>\n\t\t\t\t\t\t<button onClick={() => handleClickDeleteButton(todo.id)}>\n\t\t\t\t\t\t\t削除\n\t\t\t\t\t\t</button>\n\t\t\t\t\t</div>\n\t\t\t\t))}\n\t\t\t</div>\n\t\t</div>\n\t);\n}\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}